const fs = require('fs');
const winston = require('winston');
const child_process = require('child_process');

const mkdirp = require('mkdirp'); //for dc2
const pkgcloud = require('pkgcloud');
const path = require('path');
const archiver = require('archiver');
const ssh2 = require('ssh2');

exports.mongodb = "mongodb://localhost/warehouse";
exports.mongoose_debug = false;

//used to post/poll health status from various services
exports.redis = {
    server: "localhost",
    //port: 6379,
}

exports.github = {
    client_id: "6a581b698021c7f38c52",
    client_secret: fs.readFileSync(__dirname+"/github.client.secret"),
}

exports.amaretti = {
    api: "https://dev1.soichi.us/api/amaretti",

    //jwt used to query things from workflow service as admin
    jwt: fs.readFileSync(__dirname+'/amaretti.jwt', 'ascii').trim(),
}
exports.wf = exports.amaretti; //deprecated

exports.auth = {
    api: "https://dev1.soichi.us/api/auth",
   
    //jwt used to request auth service to issue new user jwt to be used to submit tasks onbehalf of the user
    jwt: fs.readFileSync(__dirname+'/auth.jwt', 'ascii').trim(),
}

exports.warehouse = {
    //used by rule handler to submit dataset download request
    api: "https://dev1.soichi.us/api/warehouse",

    //base url
    //url: "https://localhost:8080",
    url: "https://localhost.brainlife.io", //to test datacite

    //used to issue warehouse token to allow dataset download
    public_key: fs.readFileSync(__dirname+'/warehouse.pub'),
    private_key: fs.readFileSync(__dirname+'/warehouse.key'),

    //place to store rule logs 
    rule_logdir: "/tmp",
 }

/*
//for archive service
exports.archive = {
    //remporary path used to store downloaded datasets before shipping to hsi
    tmp: "/mnt/scratch/hayashis/archive-tmp",
}
*/

//for event handler
exports.event = {
    amqp: {
        url: "amqp://warehouse:gobrain@localhost:5672/brainlife"
    },
}

//for rule handler
exports.rule = {
    max_task_per_rule: 30, //limit number of concurrently running tasks submission
    nice: 10, //default nice value for stage/process tasks 
}

exports.express = {
    port: 12501,
    //public key used to validate jwt token
    pubkey: fs.readFileSync('/home/hayashis/git/auth/api/config/auth.pub'),
}

exports.datacite = {
    prefix: "10.0322/bldev.",  //test account
    username: "DATACITE.BL",
    password: fs.readFileSync(__dirname+'/datacite.password', {encoding: "ascii"}).trim(),
    api: "https://mds.test.datacite.org",
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//  storage system where we can archive data
exports.storage_systems = {};

//pick default storage
exports.storage_default = function() {
    //return "jetstream";
    return "wrangler";
}

//
// jetstream
// //https://github.com/pkgcloud/pkgcloud/blob/master/examples/storage/rackspace.js
//
const js_config = require(__dirname+'/jetstream');
const js_storage = pkgcloud.storage.createClient(js_config);
exports.storage_systems.jetstream = {
    need_backup: true,
    test: cb=>{
        js_storage.getContainers((err,containers)=>{
            if(err) return cb(err);
            cb();
        }); 
    },
    stat: (dataset, cb)=>{
        let contname = dataset.project.toString();
        let filename = dataset._id+".tar.gz"; //old ones were using .tar.gz

        if(dataset.storage_config && dataset.storage_config.filename) {
            contname = dataset.storage_config.contname;
            filename = dataset.storage_config.filename;
        }

        console.log(contname);
        console.log(filename);
        js_storage.getFile(contname, filename, (err,_stats)=>{
            if(err) return cb(err);
            console.dir(_stats);
            cb(null, {
                size: _stats.size,
                mtime: _stats.lastModified,
            });
        });
    },
    upload: (dataset, cb)=>{
        let contname = dataset.project.toString();
        let filename = dataset._id+'.tar';
        console.log("uploading dataset", contname, filename);

        //make sure container exists (if it exists, it's noop)
        js_storage.createContainer({
            name: contname,
            metadata: {
                //TODO..project_name?
            },
        }, (err, container)=> {
            if(err) return cb(err);
            let stream = js_storage.upload({container, remote: filename});
            let success = new Promise((resolve, reject)=>{
                stream.on('success', resolve);
                stream.on('error', reject);
            });
        
            dataset.storage_config = { contname, filename }; //anti-pattern to update dataset here..
            cb(null, stream, success);
        });
    },
    download: (dataset, cb)=>{
        let contname = dataset.project.toString();
        let filename = dataset._id+".tar.gz"; //old ones were using .tar.gz
        if(dataset.storage_config && dataset.storage_config.filename) {
            contname = dataset.storage_config.contname;
            filename = dataset.storage_config.filename;
        }
        let stream = js_storage.download({container: contname, remote: filename});
        cb(null, stream, filename);
    },
    remove: (dataset, cb)=>{
        let contname = dataset.project.toString();
        let filename = dataset._id+'.tar.gz'; //old one were using .tar.gz
        if(dataset.storage_config && dataset.storage_config.filename) {
            contname = dataset.storage_config.contname;
            filename = dataset.storage_config.filename;
        }
        console.log("removing", contname, filename);
        js_storage.removeFile(contname, filename, cb);
    }
}

function connect_dc(cb) {
    var conn = new ssh2.Client();
    conn.on('ready', ()=>{
        cb(null, conn); 
    });
    conn.on('error', err=>{
        cb(err);
    });
    try {
        console.log("connecting to dataxfer2");
        conn.connect({
            username: "hayashis",
            host: "dataxfer2.bigred2.uits.iu.edu",
            privateKey: fs.readFileSync(__dirname+'/brlife.id_rsa'),
            //passphrase: "somepass",  //what's the point?
        });
    } catch(err) {
        cb(err);
    }
}

/*
function connect_wrangler(cb) {
    var conn = new ssh2.Client();
    conn.on('ready', ()=>{
        cb(null, conn); 
    });
    conn.on('error', err=>{
        cb(err);
    });
    try {
        console.log("connecting to wrangler.io");
        conn.connect({
            username: "hayashis",
            host: "wrangler.iu.xsede.org",
            privateKey: fs.readFileSync(__dirname+'/brlife.id_rsa'),
            //passphrase: "somepass",  //what's the point?
        });
    } catch(err) {
        cb(err);
    }
}
*/


//TODO - I should implement some kind of connection queue otherwise
//I could run out of concurrent connection
let wrangler_sftp = null ;
function connect_wrangler(cb) {
    if(wrangler_sftp) {
        console.log("reusing sftp for wrangler");
        return cb(null, wrangler_sftp);
    }
    console.log("open new wrangler sftp connection");
    var conn = new ssh2.Client();
    conn.on('ready', function() {
        console.log("connected");
        conn.sftp((err, sftp)=>{
            if(err) return cb(err);
            wrangler_sftp = sftp;
            if(cb) cb(null, sftp);
            cb = null;
        });
    });
    conn.on('end', function() {
        console.log("wrangler sftp connection ended");
        wrangler_sftp = null;
    });
    conn.on('close', function() {
        console.log("wrangler sftp connection closed");
        wrangler_sftp = null;
    });
    conn.on('error', function(err) {
        console.error("wrangler sftp connectionn error");
        wrangler_sftp = null;

        //we want to return connection error to caller, but error could fire after ready event is called.
        //like timeout, or abnormal disconnect, etc..  need to prevent calling cb twice!
        if(cb) cb(err);
        cb = null;
    });

    conn.connect({
        username: "hayashis",
        host: "wrangler.iu.xsede.org",
        privateKey: fs.readFileSync(__dirname+'/brlife.id_rsa'),
        //passphrase: "somepass",  //what's the point?

        keepaliveInterval: 10*1000, //default 0 (disabled)
        //keepaliveCountMax: 30, //default 3 (https://github.com/mscdex/ssh2/issues/367)
    });
}


function get_wrangler_archive_path(dataset) {
    let _path = "/home/04040/hayashis/data/dev-archive/";
    _path += dataset.project+"/";
    _path += dataset._id+".tar";
    return _path;
}

exports.storage_systems.wrangler = {
    need_backup: false,
    test: cb=>{
        connect_wrangler((err, sftp)=>{
            if(err) return cb(err);
            console.log("loading quota.info from wrangler homedir.. should be created by cron..");
            let stream = sftp.createReadStream("quota.info");
            let content = "";
            stream.on('readable', function() {
                //could be called multiple times..
                let chunk;
                while (null !== (chunk = stream.read())) {
                    content += chunk.toString();
                }
            });
            stream.on('end', ()=>{
                //console.dir(content);
                
                //parse quota content
                let lines = content.split("\n");
                if(lines[0] != "Disk quotas for usr hayashis (uid 833400):") {
                    return cb("quota info looks odd.. "+content);
                }
                let stats = lines[3].trim().split(/[ ]+/);
                let disk_used = parseInt(stats[0]);
                let disk_quota = parseInt(stats[2]);
                let files_used = parseInt(stats[4]);
                let files_quota = parseInt(stats[6]);
                //console.log(disk_used / disk_quota);
                if(disk_used / disk_quota > 0.8) return cb("disk >80% used");
                if(files_used / files_quota > 0.8) return cb("files >80% used");
                //console.log("all good");
                cb();
            });
        });
    }, 

    stat: (dataset, cb)=>{
        connect_wrangler((err, sftp)=>{
            if(err) {
                //conn.end();
                return cb(err);
            }
            //console.log("getting stats");
            sftp.stat(get_wrangler_archive_path(dataset), (err,stat)=>{
                //console.dir(err);
                //console.dir(stat);
                /*
                Stats {
                  mode: 33206,
                  permissions: 33206,
                  uid: 833400,
                  gid: 817579,
                  size: 5427200,
                  atime: 1533646596,
                  mtime: 1533646596 }
                */
                //conn.end();
                cb(err, stat);
            });
        });
    },
    upload: (dataset, cb)=>{
        connect_wrangler((err, sftp)=>{
            if(err) {
                //conn.end();
                return cb(err);
            }
            let _path = get_wrangler_archive_path(dataset);
            //console.log("creating dir", path.dirname(_path));
            sftp.mkdir(path.dirname(_path), err=>{
                //if(err) console.dir(err); //maybe already exist? continue..
                let stream = sftp.createWriteStream(_path);
                let success = new Promise((resolve, reject)=>{
                    stream.on('close', ()=>{
                        //transfer finished successfully
                        sftp.stat(_path, (err,stat)=>{
                            if(err) reject(err);
                            else resolve(stat);
                        });
                    });
                    stream.on('error', reject); //not testetd..
                    stream.on('end', ()=>{
                        //don't do "stream.on("close", conn.end); -- doesn't work for some reason
                        //conn.end(); 
                    });
                });
                cb(null, stream, success);
            });
        });
    },
    download: (dataset, cb)=>{
        connect_wrangler((err, sftp)=>{
            if (err) {
                //conn.end();
                return cb(err);
            }
            let stream = sftp.createReadStream(get_wrangler_archive_path(dataset));
            stream.on('error', err=>{
                console.error("stream failed but train has already left the station", err);
            });
            stream.on('close', code=>{
                //conn.end();
                console.log("write stream closed");
            });
            cb(null, stream, dataset._id+".tar");
        });
    },
} 

exports.storage_systems.dc2 = {
    need_backup: false,
    test: cb=>{
        //TODO - I should do more checking?
        connect_dc((err, conn)=>{
            if(err) return cb(err);
            conn.end();
            cb();
        });
    }, 
    stat: (dataset, cb)=>{
        //TODO..
        cb();
    },
    upload: (dataset, cb)=>{
        cb("no upload to dcwan/hcp");
    },
    download: (dataset, cb)=>{
        connect_dc((err, conn)=>{
            if(err) return cb(err);
             conn.sftp((err, sftp)=>{
                if (err) {
                    conn.end();
                    return cb(err);
                }
                var path = "/N/dc2/projects/brainlife/dev1-warehouse/datasets/"+dataset.project+"/"+dataset._id+".tar.gz";
                var stream = sftp.createReadStream(path);
                stream.on('error', err=>{
                    console.error("stream failed but train has already left the station", err);
                });
                stream.on('close', code=>{
                    conn.end();
                });
                cb(null, stream, dataset._id+".tar.gz");
            });
        });
    },
} 

exports.storage_systems["dcwan/hcp"] = {
    test: cb=>{
        connect_dc((err, conn)=>{
            if(err) return cb(err);
            conn.end();
            cb();
        });
    }, 
    stat: (dataset, cb)=>{
        //TODO..
        cb();
    },
    upload: (dataset, cb)=>{
        cb("no upload to dcwan/hcp");
    },
    download: (dataset, cb)=>{
        connect_dc((err, conn)=>{
            if(err) return cb(err);
            if(dataset.storage_config.files) {
                 conn.sftp((err, sftp)=>{
                    if (err) {
                        conn.end();
                        return cb(err);
                    }

                    //TODO - archiver seems to leak memory really bad.. 
                    //I can't really recreate the problem, but I think it happens if more data is fed to archiver
                    //than archiver can stream it out - using some kind of an internal buffer that never gets released
                    var archive = archiver('tar');
                    dataset.storage_config.files.forEach(file=>{
                        var stream = sftp.createReadStream(file.filepath);
                        stream.on('error', err=>{
                            console.error("stream failed but train has already left the station", file.filepath, err);
                        });
                        stream.on('end', ()=>{
                            console.log("stream ended", file.filepath);
                        });
                        console.log("archiver downloading", file.filepath, file.local);
                        archive.append(stream, {name: file.local});
                    });
                    archive.on('finish', ()=>{
                        console.log("archive finished");
                    });
                    archive.on('end', ()=>{
                        console.log("archive ended.. conn.end()");
                        conn.end();
                    });
                    archive.on('error', err=>{
                        console.log("archive error.......................");
                        console.error(err);
                    });
                    console.log("archive finalized");
                    archive.finalize();
                    cb(null, archive, dataset._id+".tar");
                });
            }

            if(dataset.storage_config.dirpath) {
                var local = dataset.storage_config.local;
                conn.exec("cd "+dataset.storage_config.dirpath+" && tar hc * --transform 's|^|/"+local+"/|'", (err, stream)=>{
                    if(err) return cb(err);
                    stream.on('close', code=>{
                        //console.log("done with tar stream - closing connection:",code)
                        conn.end();
                    });
                    cb(null, stream, dataset._id+".tar");
                });
            }
        });
    },
}

const nki_config = require(__dirname+'/nki');
const nki_storage = pkgcloud.storage.createClient(nki_config);
//some BREATHHOLD files are inaccessible
//https://www.nitrc.org/forum/forum.php?thread_id=8563&forum_id=1244
exports.storage_systems["nki"] = {
    test: cb=>{
        nki_storage.getContainer(nki_config.bucket, (err,container)=>{
            if(err) return cb(err);
            console.log("nki debug/test", container.files.length); //length should be 1000 (max)
            cb();
        }); 
    }, 
    stat: (dataset, cb)=>{
        //can't obtain stats for .tar.gz because we are creating it on the fly
        cb(null);
    },
    upload: (dataset, cb)=>{
        cb("read only");
    },
    download: (dataset, cb)=>{
        var archive = archiver('tar');
        dataset.storage_config.files.forEach(file=>{
            console.log("downloading", file.s3, "from", nki_config.bucket, file.local);
            var stream = nki_storage.download({container: nki_config.bucket, remote: file.s3});
            archive.append(stream, {name: file.local});
        });
        archive.finalize();
        cb(null, archive, dataset._id+".tar");
    },
}

const openneuro_config = require(__dirname+'/openneuro');
const openneuro_storage = pkgcloud.storage.createClient(openneuro_config);
//I don't know how to stream directory structures like freesurfer..
exports.storage_systems["openneuro"] = {
    test: cb=>{
        openneuro_storage.getContainer(openneuro_config.bucket, (err,container)=>{
            if(err) return cb(err);
            console.log("openneuro debug/test", container.files.length); //length should be 1000 (max)
            cb();
        }); 
    }, 
    stat: (dataset, cb)=>{
        //can't obtain stats for .tar.gz because we are creating it on the fly
        cb(null);
    },
    upload: (dataset, cb)=>{
        cb("read only");
    },
    download: (dataset, cb)=>{
        var archive = archiver('tar');
        dataset.storage_config.files.forEach(file=>{
            console.log("downloading", file.s3, "from", openneuro_config.bucket, file.local);
            //downloading from s3 takes 30 seconds before the first byte arrives.
            //it's not archiver's fault or anything else.
            //https://github.com/pkgcloud/pkgcloud/issues/596
            var stream = openneuro_storage.download({container: openneuro_config.bucket, remote: file.s3});
            archive.append(stream, {name: file.local});
        });
        archive.finalize();
        cb(null, archive, dataset._id+".tar");
    },
}

//config used to backup data from warehouse 
exports.sda = {
    ssh: {
        username: "hayashis",
        host: "sftp.sdarchive.iu.edu",
        privateKey: fs.readFileSync('/home/hayashis/.ssh/id_rsa').toString(),
        //debug: console.log,
    },
    basedir: "test",
}

exports.logger = {
    winston: {
        //hide headers which may contain jwt
        requestWhitelist: ['url', 'method', 'httpVersion', 'originalUrl', 'query'],
        transports: [
            //display all logs to console
            new winston.transports.Console({
                timestamp: function() {
                    var d = new Date();
                    if(process.env.NODE_APP_INSTANCE) {
                        return process.env.NODE_APP_INSTANCE + "> "+ d.toString();
                    } else {
                        return d.toString();
                    }
                },
                level: 'debug',
                colorize: true,
                stderrLevels: ["error"], //default includes debug
            }),
        ]
    },
}

